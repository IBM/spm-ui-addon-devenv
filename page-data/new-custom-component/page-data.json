{"componentChunkName":"component---src-pages-new-custom-component-mdx","path":"/new-custom-component/","result":{"pageContext":{"frontmatter":{"title":"Creating a custom Carbon add-on component","description":"Creating a custom Carbon add-on component"},"relativePagePath":"/new-custom-component.mdx","titleType":"page","MdxNode":{"id":"c1d879da-dd87-5dd3-b7fd-72d8365e2b04","children":[],"parent":"2d75d0fc-c674-5f37-b0a9-5a5c965346f4","internal":{"content":"---\ntitle: Creating a custom Carbon add-on component\ndescription: Creating a custom Carbon add-on component\n---\n\nComplete the following steps to create a Carbon add-on component called `componentX` and prepare to integrate it into a custom UIM page.\nThe steps do not need to be done in this order, but it is currently the recommended order.\n\n1. Implement a custom React JavaScript component by completing the following steps:\n   - In the `custom-carbon-addons` package, create a directory for the component in the `react` directory. For example, `custom-carbon-addons/src/react/addons/componentX`.\n   - Create the JavaScript files for `componentX` in the directory. To create add-on components that are based on Carbon components, import the Carbon components from the `carbon-components` node module.\n   - You can do your unit tests in parallel to test the generated HTML output from the component.\n2. Implement the look and feel of the component with Sass. Ensure that you follow the Carbon and Cúram design guidance.\n   - In the `custom-carbon-addon/src/scss/addons` directory, create an SCSS file for the component. For example, `componentX.scss`.\n   - Import `componentX.scss` into the `index.scss` file.\n3. Implement a query provider in Apollo Client. An Apollo Client query provider enables the cached data from GraphQL to be integrated with a React component. Complete the following steps:\n   - Create a directory in the `custom-carbon-addon/src/apollo-client-hooks/hooks` directory. For example, `componentX`.\n   - Create the JavaScript files for your query provider with reference to the samples in `carbon-addons-devenv/src/apollo-client-hooks/hooks/hook_samples`.\n     Use the `ApolloClientDataProvider`, `ApolloClientQueryProvider`, and `ApolloClientHookTemplate` React helper components in `carbon-addons-devenv/src/apollo-client-hooks/hooks/core` to help with this task.\n   - Create a query that accesses data from the back-end by importing `gql` and `useQuery` from `@apollo/client`. If you already have a GraphQL query that serves a number of components, you can use that query.\n4. Test the Carbon component in Storybook. To test `componentX` in storybook, you can test components in isolation before you integrate them into Cúram.\n   - In the `stories` directory of the `custom-carbon-addon` package, create a directory for the component. For example, `custom-carbon-addon/stories/componentX`. Run `npm run storybook` to test components.\n5. Create a JavaScript renderer function. You can use the `Renderer.create()` helper function to implement a JavaScript Renderer function to integrate the component into a Java Renderer on the UIM page. You can place your renderer functions in the `custom-carbon-addon/renderers` directory. For example, create the`CarbonComponentXViewRenderer` function.\n","type":"Mdx","contentDigest":"266106a4bf1fd67505111531c144a204","owner":"gatsby-plugin-mdx","counter":95},"frontmatter":{"title":"Creating a custom Carbon add-on component","description":"Creating a custom Carbon add-on component"},"exports":{},"rawBody":"---\ntitle: Creating a custom Carbon add-on component\ndescription: Creating a custom Carbon add-on component\n---\n\nComplete the following steps to create a Carbon add-on component called `componentX` and prepare to integrate it into a custom UIM page.\nThe steps do not need to be done in this order, but it is currently the recommended order.\n\n1. Implement a custom React JavaScript component by completing the following steps:\n   - In the `custom-carbon-addons` package, create a directory for the component in the `react` directory. For example, `custom-carbon-addons/src/react/addons/componentX`.\n   - Create the JavaScript files for `componentX` in the directory. To create add-on components that are based on Carbon components, import the Carbon components from the `carbon-components` node module.\n   - You can do your unit tests in parallel to test the generated HTML output from the component.\n2. Implement the look and feel of the component with Sass. Ensure that you follow the Carbon and Cúram design guidance.\n   - In the `custom-carbon-addon/src/scss/addons` directory, create an SCSS file for the component. For example, `componentX.scss`.\n   - Import `componentX.scss` into the `index.scss` file.\n3. Implement a query provider in Apollo Client. An Apollo Client query provider enables the cached data from GraphQL to be integrated with a React component. Complete the following steps:\n   - Create a directory in the `custom-carbon-addon/src/apollo-client-hooks/hooks` directory. For example, `componentX`.\n   - Create the JavaScript files for your query provider with reference to the samples in `carbon-addons-devenv/src/apollo-client-hooks/hooks/hook_samples`.\n     Use the `ApolloClientDataProvider`, `ApolloClientQueryProvider`, and `ApolloClientHookTemplate` React helper components in `carbon-addons-devenv/src/apollo-client-hooks/hooks/core` to help with this task.\n   - Create a query that accesses data from the back-end by importing `gql` and `useQuery` from `@apollo/client`. If you already have a GraphQL query that serves a number of components, you can use that query.\n4. Test the Carbon component in Storybook. To test `componentX` in storybook, you can test components in isolation before you integrate them into Cúram.\n   - In the `stories` directory of the `custom-carbon-addon` package, create a directory for the component. For example, `custom-carbon-addon/stories/componentX`. Run `npm run storybook` to test components.\n5. Create a JavaScript renderer function. You can use the `Renderer.create()` helper function to implement a JavaScript Renderer function to integrate the component into a Java Renderer on the UIM page. You can place your renderer functions in the `custom-carbon-addon/renderers` directory. For example, create the`CarbonComponentXViewRenderer` function.\n","fileAbsolutePath":"/home/runner/work/spm-ui-addon-devenv/spm-ui-addon-devenv/cookbook/src/pages/new-custom-component.mdx"}}},"staticQueryHashes":["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}